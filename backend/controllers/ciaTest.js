
import chats from '../models/chats.js';
import OpenAI from "openai";
import { user } from '../models/user.js';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

let mesg= [{role: "system", content: "You are a master prompt genertator for other instances of chatgpt provided a field name generate a system prompt to be given in a api call for another chatgpt instance. For example if you are provied field name Machine Learning then the response should be like \"You are an expert at Machine learning at a online eductaional website. Help the students with their queries \" following this you will get feedbacks to improve your prompt. Given a feedback you should be able to generate a new prompt. Remeber to return only the prompt and not the feedback or field name. Try to include problem solving skills"}]

let adversary = [{role: "system", content: "You are a prompt analyser for other instances of chatgpt. Provided a field name used for generating a system prompt to be given in a api call for another chatgpt instance and a prompt generated by a master prompt generator you should be able to give a feedback on how to improve this prompt. For example given input can be like \"field name: Machine Learning prompt: You are an expert at Machine learning at a online eductaional website. Help the students with their queries \" following this you should give feedbacks to improve the prompt. Limit your feedbacks to 200 words and try to be concise. Remeber not to include specialisation beyond the given field name. Try to include problem solving skills"}]

export const createChat=  async (req, res) => {
    try{
    const {userId} = req.body;
    const userExisting = await user.findById(userId);
    if(!userExisting)
    {
        return res.status(404).json({message:"User Not found"});
    }
    mesg.push({ role: "user", content: String(req.body.botname) });
    for(let i=0;i<2;i++)
    {
        const chatCompletion = await openai.chat.completions.create({
            messages: mesg,
            model: "gpt-3.5-turbo",
        });
        console.log(chatCompletion.choices[0].message.content);
        adversary.push({role: "user", content: "field name: "+String(req.body.botname)+" prompt: "+chatCompletion.choices[0].message.content});
        const chatCompletion2 = await openai.chat.completions.create({
            messages: adversary,
            model: "gpt-3.5-turbo",
        });
        mesg.push({role: "user", content: "feedback : "+ chatCompletion2.choices[0].message.content});
        console.log(chatCompletion2.choices[0].message.content);
    }
    const chatCompletion = await openai.chat.completions.create({
        messages: mesg,
        model: "gpt-3.5-turbo",
    });
    let newchat = new chats();
    newchat.messages.push({role: "system", content: chatCompletion.choices[0].message.content});
    newchat.botname=String(req.body.botname);
    await newchat.save();
    if(!userExisting.chatIds)
    {
        userExisting.chatIds=[];
    }
    userExisting.chatIds.push(newchat._id);
    await userExisting.save();
    res.status(200).json({message: chatCompletion.choices[0].message.content, id: newchat._id});
    }
    catch(e)
    {
        console.log(e);
        res.status(400).json({message: "Error"});
    }
  };

export const postChat = async (req, res) => {
    try{
      let chat = await chats.findById(req.body.chatId);
      let mes= chat.messages;
      mes = mes.map((m)=>{
          return {
              role: m.role,
              content: m.content
          };
      })
      mes.push({role: "user", content: req.body.ques});
      const chatCompletion = await openai.chat.completions.create({
        messages: mes,
        model: "gpt-3.5-turbo",
    });
    chat.messages.push({role: "user", content: req.body.ques});
    chat.messages.push({role: "assistant", content: chatCompletion.choices[0].message.content});
    chat.save();
    res.status(200).json({message: chatCompletion.choices[0].message});
    }
    catch(e)
    {
        console.log(e);
        res.status(400).json({message: "Error"});
    }
};

export const postHelper = async(req,res)=>{
    try{
    mesg.push({ role: "user", content: String(req.body.botname) });
    const chatCompletion = await openai.chat.completions.create({
        messages: mesg,
        model: "gpt-3.5-turbo",
    });
    let newmsg=[];
    newmsg.push({role: "system", content: chatCompletion.choices[0].message.content});
    newmsg.push({role:"user",content :req.body.content});
    const chatCompletion2 = await openai.chat.completions.create({
        messages: newmsg,
        model: "gpt-3.5-turbo",
    });
    console.log(chatCompletion2.choices[0].message.content);
    return res.status(200).json(chatCompletion2.choices[0].message.content)
    }
    catch(e)
    {
        console.log(e);
        res.status(400).json({message: "Error"});
    }
};


